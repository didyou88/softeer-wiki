# 📝 학습 일지  
**날짜:** 2025.07.09

---

## ✅ 오늘의 작업 내용  

- **정적 HTML 파일 응답 처리 구현**  
  - 클라이언트 요청 경로를 파싱하여 static 디렉토리 내 HTML 파일 응답 

- **HTTP Request 내용 출력**  
  - 요청 라인 및 헤더 정보를 log.debug 모드로 출력하여 HTTP에 포함된 정보를 확인함

- **Thread → `java.util.concurrent` 패키지로 변경**  
  - 직접 Thread를 생성하는 방식에서 `ExecutorService` 기반으로 구조를 변경함

- **유지보수성 향상 작업**  
  - HTTP 응답 생성 인터페이스 생성 (HttpResponse status에 따른 일관성 확보)
  - `PathUtil` 클래스 생성 → 요청 URL을 파싱하고 파일 경로로 변환하는 유틸 메서드 작성

---

## 💡 주요 고민 사항

### 1. Concurrent 패키지에서 어떤 클래스를 선택해야 하는가?  
- 상황 가정: *부하가 많은 게시판 서비스*  
- 주어진 static 파일 정보: 댓글 작성, 로그인, 로그아웃과 같은 I/O 중심 작업이 많음  
- 선택 클래스: `ThreadPoolExecutor`  
- 선택 이유:
  - 스레드 풀을 이용한 Thread 재사용 가능 → client 요청을 처리할 자원을 효율적으로 이용할 수 있다!
  - 큐 기반 작업 대기 처리 → 요청 폭주 상황을 가정했을 때 대기열을 만들 수 있다!
  - 최대 스레드 수를 설정하여 서버 폭주를 방지함

### 2. 유지보수성이 좋은 코드는 어떤 코드인가?  
- 책임이 명확히 분리된 구조
: RequestHandler에 모여 있던 기능을 분리함 (응답, 정적 파일 경로 탐색)
- 표준화를 하자
: HttpResponse 인터페이스를 생성하여 Http200Response, Http404Response를 구현함
- 공통 기능은 Util 클래스로 분리하여 **재사용성을 높임**

---

## 📌 앞으로의 과제  

1. **최대 접속자 수 초과 요청에 대한 처리 방법 고민**  
   - 요청 거부 or 대기 큐 적용 여부 결정

2. **부하 테스트를 통한 구조 검증**  
   - Apache JMeter 등을 활용하여 성능 측정
   - `ThreadPoolExecutor`의 파라미터 튜닝 기준을 고민해보자

3. **Web Server VS WAS**
   - 두 서버의 차이점을 비교해보고 로그인시 동적 정보를 어떻게 줄 수 있을지 로직 구현해보기 

---

## 느낀점



---


